//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Zone Control 4
// 
//==================================================================================================
include "TriggerLibs/NativeLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
int[9] gv_player_team;
bool[9] gv_player_alive;
point[9] gv_engineering_bay_positions;
point[9] gv_initial_bunker_positions;
point[9] gv_nuke_silo_positions;
int[61] gv_spawn_scan_order;
unit[65] gv_bunkers;
point[65] gv_bunker_rally_points;
bool[65] gv_bunker_merc_status;
string[65] gv_bunker_base_unit_type;
int[9] gv_position_players;
int[65] gv_bunker_owners;
point[65] gv_bunker_locations;
unitgroup[9] gv_structuresGroup;

void InitGlobals () {
    int init_i;

    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_structuresGroup[init_i] = UnitGroupEmpty();
    }
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
bool gf_SpawnPlayers ();
int gf_GetBunkerIndex (unit lp_bunker);
bool gf_OnBunkerCreated (int lp_player, unit lp_bunker);
bool gf_OnBunkerCreated2 (unit lp_worker);
bool gf_OnBunkerRemoved (int lp_player, unit lp_bunker);
bool gf_TestPlayerDead (int lp_player);
bool gf_TestVictoryCondition ();

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_MeleeInitialization;
trigger gt_SpawnUnit;
trigger gt_OnRallyChange;
trigger gt_OnUpgrade;
trigger gt_BunkerBuild;
trigger gt_BunkerDestoryed;
trigger gt_ScvDied;
trigger gt_ShardSpawn;
trigger gt_MineralTrickle;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
bool gf_SpawnPlayers () {
    // Variable Declarations
    int lv_position;

    // Automatic Variable Declarations
    const int auto5A7C1BEA_ae = 8;
    const int auto5A7C1BEA_ai = 1;

    // Variable Initialization

    // Implementation
    gv_bunker_base_unit_type[0] = "Marine";
    gv_bunker_base_unit_type[1] = "Marine";
    gv_bunker_base_unit_type[2] = "Marine";
    gv_bunker_base_unit_type[3] = "Marine";
    gv_bunker_base_unit_type[4] = "Marine";
    gv_bunker_base_unit_type[5] = "Marine";
    gv_bunker_base_unit_type[6] = "Marine";
    gv_bunker_base_unit_type[7] = "Marine";
    gv_bunker_base_unit_type[8] = "Marine";
    gv_bunker_base_unit_type[9] = "Reaper";
    gv_bunker_base_unit_type[10] = "Reaper";
    gv_bunker_base_unit_type[11] = "Reaper";
    gv_bunker_base_unit_type[12] = "Reaper";
    gv_bunker_base_unit_type[13] = "Reaper";
    gv_bunker_base_unit_type[14] = "Reaper";
    gv_bunker_base_unit_type[15] = "Marine";
    gv_bunker_base_unit_type[16] = "Marine";
    gv_bunker_base_unit_type[17] = "Reaper";
    gv_bunker_base_unit_type[18] = "Marauder";
    gv_bunker_base_unit_type[19] = "Marauder";
    gv_bunker_base_unit_type[20] = "Marauder";
    gv_bunker_base_unit_type[21] = "Marauder";
    gv_bunker_base_unit_type[22] = "Reaper";
    gv_bunker_base_unit_type[23] = "Marine";
    gv_bunker_base_unit_type[24] = "Marine";
    gv_bunker_base_unit_type[25] = "Reaper";
    gv_bunker_base_unit_type[26] = "Marauder";
    gv_bunker_base_unit_type[27] = "Ghost";
    gv_bunker_base_unit_type[28] = "Ghost";
    gv_bunker_base_unit_type[29] = "Marauder";
    gv_bunker_base_unit_type[30] = "Reaper";
    gv_bunker_base_unit_type[31] = "Marine";
    gv_bunker_base_unit_type[32] = "Marine";
    gv_bunker_base_unit_type[33] = "Reaper";
    gv_bunker_base_unit_type[34] = "Marauder";
    gv_bunker_base_unit_type[35] = "Ghost";
    gv_bunker_base_unit_type[36] = "Ghost";
    gv_bunker_base_unit_type[37] = "Marauder";
    gv_bunker_base_unit_type[38] = "Reaper";
    gv_bunker_base_unit_type[39] = "Marine";
    gv_bunker_base_unit_type[40] = "Marine";
    gv_bunker_base_unit_type[41] = "Reaper";
    gv_bunker_base_unit_type[42] = "Marauder";
    gv_bunker_base_unit_type[43] = "Marauder";
    gv_bunker_base_unit_type[44] = "Marauder";
    gv_bunker_base_unit_type[45] = "Marauder";
    gv_bunker_base_unit_type[46] = "Reaper";
    gv_bunker_base_unit_type[47] = "Marine";
    gv_bunker_base_unit_type[48] = "Marine";
    gv_bunker_base_unit_type[49] = "Reaper";
    gv_bunker_base_unit_type[50] = "Reaper";
    gv_bunker_base_unit_type[51] = "Reaper";
    gv_bunker_base_unit_type[52] = "Reaper";
    gv_bunker_base_unit_type[53] = "Reaper";
    gv_bunker_base_unit_type[54] = "Reaper";
    gv_bunker_base_unit_type[55] = "Marine";
    gv_bunker_base_unit_type[56] = "Marine";
    gv_bunker_base_unit_type[57] = "Marine";
    gv_bunker_base_unit_type[58] = "Marine";
    gv_bunker_base_unit_type[59] = "Marine";
    gv_bunker_base_unit_type[60] = "Marine";
    gv_bunker_base_unit_type[61] = "Marine";
    gv_bunker_base_unit_type[62] = "Marine";
    gv_bunker_base_unit_type[63] = "Marine";
    gv_spawn_scan_order[0] = 1;
    gv_spawn_scan_order[1] = 6;
    gv_spawn_scan_order[2] = 15;
    gv_spawn_scan_order[3] = 55;
    gv_spawn_scan_order[4] = 62;
    gv_spawn_scan_order[5] = 57;
    gv_spawn_scan_order[6] = 48;
    gv_spawn_scan_order[7] = 8;
    gv_spawn_scan_order[8] = 2;
    gv_spawn_scan_order[9] = 5;
    gv_spawn_scan_order[10] = 23;
    gv_spawn_scan_order[11] = 47;
    gv_spawn_scan_order[12] = 61;
    gv_spawn_scan_order[13] = 58;
    gv_spawn_scan_order[14] = 40;
    gv_spawn_scan_order[15] = 16;
    gv_spawn_scan_order[16] = 3;
    gv_spawn_scan_order[17] = 4;
    gv_spawn_scan_order[18] = 31;
    gv_spawn_scan_order[19] = 39;
    gv_spawn_scan_order[20] = 59;
    gv_spawn_scan_order[21] = 60;
    gv_spawn_scan_order[22] = 32;
    gv_spawn_scan_order[23] = 24;
    gv_spawn_scan_order[24] = 9;
    gv_spawn_scan_order[25] = 14;
    gv_spawn_scan_order[26] = 54;
    gv_spawn_scan_order[27] = 49;
    gv_spawn_scan_order[28] = 10;
    gv_spawn_scan_order[29] = 13;
    gv_spawn_scan_order[30] = 22;
    gv_spawn_scan_order[31] = 46;
    gv_spawn_scan_order[32] = 53;
    gv_spawn_scan_order[33] = 50;
    gv_spawn_scan_order[34] = 41;
    gv_spawn_scan_order[35] = 17;
    gv_spawn_scan_order[36] = 11;
    gv_spawn_scan_order[37] = 12;
    gv_spawn_scan_order[38] = 30;
    gv_spawn_scan_order[39] = 38;
    gv_spawn_scan_order[40] = 52;
    gv_spawn_scan_order[41] = 51;
    gv_spawn_scan_order[42] = 33;
    gv_spawn_scan_order[43] = 25;
    gv_spawn_scan_order[44] = 18;
    gv_spawn_scan_order[45] = 21;
    gv_spawn_scan_order[46] = 45;
    gv_spawn_scan_order[47] = 42;
    gv_spawn_scan_order[48] = 19;
    gv_spawn_scan_order[49] = 20;
    gv_spawn_scan_order[50] = 29;
    gv_spawn_scan_order[51] = 37;
    gv_spawn_scan_order[52] = 44;
    gv_spawn_scan_order[53] = 43;
    gv_spawn_scan_order[54] = 34;
    gv_spawn_scan_order[55] = 26;
    gv_spawn_scan_order[56] = 27;
    gv_spawn_scan_order[57] = 28;
    gv_spawn_scan_order[58] = 36;
    gv_spawn_scan_order[59] = 35;
    gv_position_players[0] = 1;
    gv_position_players[1] = 2;
    gv_position_players[2] = 3;
    gv_position_players[3] = 4;
    gv_position_players[4] = 5;
    gv_position_players[5] = 6;
    gv_position_players[6] = 7;
    gv_position_players[7] = 8;
    gv_engineering_bay_positions[0] = Point(21.5, 92.5);
    gv_engineering_bay_positions[1] = Point(18.5, 88.5);
    gv_engineering_bay_positions[2] = Point(90.5, 90.5);
    gv_engineering_bay_positions[3] = Point(93.5, 88.5);
    gv_engineering_bay_positions[4] = Point(93.5, 19.5);
    gv_engineering_bay_positions[5] = Point(90.5, 17.5);
    gv_engineering_bay_positions[6] = Point(18.5, 19.5);
    gv_engineering_bay_positions[7] = Point(21.5, 17.5);
    gv_nuke_silo_positions[0] = Point(19.5, 93.5);
    gv_nuke_silo_positions[1] = Point(16.5, 91.5);
    gv_nuke_silo_positions[2] = Point(92.5, 93.5);
    gv_nuke_silo_positions[3] = Point(95.5, 91.5);
    gv_nuke_silo_positions[4] = Point(95.5, 16.5);
    gv_nuke_silo_positions[5] = Point(92.5, 14.5);
    gv_nuke_silo_positions[6] = Point(18.5, 19.5);
    gv_nuke_silo_positions[7] = Point(21.5, 17.5);
    gv_initial_bunker_positions[0] = Point(30.5, 89.5);
    gv_initial_bunker_positions[1] = Point(20.5, 79.5);
    gv_initial_bunker_positions[2] = Point(81.5, 89.5);
    gv_initial_bunker_positions[3] = Point(91.5, 79.5);
    gv_initial_bunker_positions[4] = Point(91.5, 28.5);
    gv_initial_bunker_positions[5] = Point(81.5, 18.5);
    gv_initial_bunker_positions[6] = Point(20.5, 28.5);
    gv_initial_bunker_positions[7] = Point(30.5, 18.5);
    gv_player_team[0] = 0;
    gv_player_team[1] = 0;
    gv_player_team[2] = 1;
    gv_player_team[3] = 1;
    gv_player_team[4] = 2;
    gv_player_team[5] = 2;
    gv_player_team[6] = 3;
    gv_player_team[7] = 3;
    lv_position = 0;
    for ( ; ( (auto5A7C1BEA_ai >= 0 && lv_position <= auto5A7C1BEA_ae) || (auto5A7C1BEA_ai < 0 && lv_position >= auto5A7C1BEA_ae) ) ; lv_position += auto5A7C1BEA_ai ) {
        if (((PlayerType(gv_position_players[lv_position]) == c_playerTypeUser) || (PlayerType(gv_position_players[lv_position]) == c_playerTypeComputer))) {
            gv_player_alive[lv_position] = true;
            VisRevealArea(gv_position_players[lv_position], RegionEntireMap(), 0.1, false);
            UnitCreate(1, "GhostAcademy", c_unitCreateIgnorePlacement, gv_position_players[lv_position], gv_nuke_silo_positions[lv_position], 270.0);
            UnitControlGroupAddUnit(gv_position_players[lv_position], 4, UnitLastCreated());
            UnitCreate(1, "EngineeringBay", c_unitCreateIgnorePlacement, gv_position_players[lv_position], gv_engineering_bay_positions[lv_position], 270.0);
            UnitControlGroupAddUnit(gv_position_players[lv_position], 4, UnitLastCreated());
            UnitCreate(1, "Bunker", c_unitCreateIgnorePlacement, gv_position_players[lv_position], gv_initial_bunker_positions[lv_position], 270.0);
            CameraPan(gv_position_players[lv_position], gv_initial_bunker_positions[lv_position], 0.01, -1, 10.0, false);
            if ((gf_OnBunkerCreated(gv_position_players[lv_position], UnitLastCreated()) == true)) {
            }

            UnitCreate(1, "SCV", 0, gv_position_players[lv_position], gv_initial_bunker_positions[lv_position], 270.0);
            if ((gf_OnBunkerCreated2(UnitLastCreated()) == true)) {
            }

        }
    }
    return true;
}

int gf_GetBunkerIndex (unit lp_bunker) {
    // Variable Declarations
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_point = UnitGetPosition(lp_bunker);
    return (RoundI(Round(((PointGetX(lv_point) - 21.0) / 10.0))) + RoundI((((90.0 - PointGetY(lv_point)) / 10.0) * 8.0)));
}

bool gf_OnBunkerCreated (int lp_player, unit lp_bunker) {
    // Variable Declarations
    int lv_bunker_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_bunker_index = gf_GetBunkerIndex(lp_bunker);
    gv_bunker_locations[lv_bunker_index] = UnitGetPosition(lp_bunker);
    gv_bunker_owners[lv_bunker_index] = lp_player;
    gv_bunkers[lv_bunker_index] = lp_bunker;
    UnitControlGroupAddUnit(lp_player, 2, lp_bunker);
    UnitGroupAdd(gv_structuresGroup[lp_player], lp_bunker);
    TriggerAddEventUnitDied(gt_BunkerDestoryed, UnitRefFromUnit(lp_bunker));
     TriggerAddEventUnitOrder(gt_OnRallyChange, UnitRefFromUnit(lp_bunker), AbilityCommand("Rally", 0));
    return true;
}

bool gf_OnBunkerCreated2 (unit lp_worker) {
    // Variable Declarations
    int lv_bunker_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    UnitControlGroupAddUnit(UnitGetOwner(lp_worker), 3, lp_worker);
    TriggerAddEventUnitDied(gt_ScvDied, UnitRefFromUnit(lp_worker));
    return true;
}

bool gf_OnBunkerRemoved (int lp_player, unit lp_bunker) {
    // Variable Declarations
    int lv_bunker_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_bunker_index = gf_GetBunkerIndex(lp_bunker);
    gv_bunker_owners[lv_bunker_index] = 0;
    gv_bunker_merc_status[lv_bunker_index] = false;
    if ((gf_TestPlayerDead(lp_player) == true)) {
    }

    return true;
}

bool gf_TestPlayerDead (int lp_player) {
    // Variable Declarations
    unit lv_unit;
    int lv_slot;

    // Automatic Variable Declarations
    const int autoA6BAEF31_ae = 63;
    const int autoA6BAEF31_ai = 1;
    unitgroup autoF739310F_g;
    int autoF739310F_u;

    // Variable Initialization

    // Implementation
    lv_slot = 1;
    for ( ; ( (autoA6BAEF31_ai >= 0 && lv_slot <= autoA6BAEF31_ae) || (autoA6BAEF31_ai < 0 && lv_slot >= autoA6BAEF31_ae) ) ; lv_slot += autoA6BAEF31_ai ) {
        if ((gv_bunker_owners[lv_slot] == lp_player)) {
            return false;
        }

    }
    VisRevealArea(lp_player, RegionEntireMap(), 0.0, false);
    gv_player_alive[lp_player] = false;
    autoF739310F_g = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF739310F_u = UnitGroupCount(autoF739310F_g, c_unitCountAll);
    for (;; autoF739310F_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoF739310F_g, autoF739310F_u);
        if (lv_unit == null) { break; }
        UnitRemove(lv_unit);
    }
    if ((gf_TestVictoryCondition() == true)) {
    }

    return true;
}

bool gf_TestVictoryCondition () {
    // Variable Declarations
    int lv_player;
    int lv_alive_team;

    // Automatic Variable Declarations
    const int autoE750AFA0_ae = 8;
    const int autoE750AFA0_ai = 1;
    const int auto09869863_ae = 8;
    const int auto09869863_ai = 1;

    // Variable Initialization
    lv_alive_team = -1;

    // Implementation
    lv_player = 0;
    for ( ; ( (autoE750AFA0_ai >= 0 && lv_player <= autoE750AFA0_ae) || (autoE750AFA0_ai < 0 && lv_player >= autoE750AFA0_ae) ) ; lv_player += autoE750AFA0_ai ) {
        if ((gv_player_alive[lv_player] == true)) {
            if (((lv_alive_team == gv_player_team[lv_player]) || (lv_alive_team == -1))) {
                lv_alive_team = gv_player_team[lv_player];
            }
            else {
                return false;
            }
        }

    }
    lv_player = 0;
    for ( ; ( (auto09869863_ai >= 0 && lv_player <= auto09869863_ae) || (auto09869863_ai < 0 && lv_player >= auto09869863_ae) ) ; lv_player += auto09869863_ai ) {
        if ((lv_player == lv_alive_team)) {
            GameOver(lv_player, c_gameOverVictory, false, true);
            GameOver(lv_player, c_gameOverDefeat, false, true);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Melee Initialization
//--------------------------------------------------------------------------------------------------
bool gt_MeleeInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup autoD61BCB46_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoD61BCB46_g = PlayerGroupAll();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoD61BCB46_g, lv_player);
        if (lv_player < 0) { break; }
        PlayerModifyPropertyInt(lv_player, c_playerPropMinerals, c_playerPropOperSetTo, 1000000);
    }
    if ((gf_SpawnPlayers() == true)) {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MeleeInitialization_Init () {
    gt_MeleeInitialization = TriggerCreate("gt_MeleeInitialization_Func");
    TriggerAddEventMapInit(gt_MeleeInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SpawnUnit
//--------------------------------------------------------------------------------------------------
bool gt_SpawnUnit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_scan_index;
    string lv_unit_type;
    int lv_bunker_owner;
    int lv_bunker_index;

    // Automatic Variable Declarations
    const int auto0D528480_ae = 60;
    const int auto0D528480_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_scan_index = 0;
    for ( ; ( (auto0D528480_ai >= 0 && lv_scan_index <= auto0D528480_ae) || (auto0D528480_ai < 0 && lv_scan_index >= auto0D528480_ae) ) ; lv_scan_index += auto0D528480_ai ) {
        lv_bunker_index = gv_spawn_scan_order[lv_scan_index];
        lv_bunker_owner = gv_bunker_owners[lv_bunker_index];
        if ((lv_bunker_owner != 0) && (PlayerGetPropertyInt(lv_bunker_owner, c_playerPropSuppliesUsed) < PlayerGetPropertyInt(lv_bunker_owner, c_playerPropSuppliesMade))) {
            lv_unit_type = gv_bunker_base_unit_type[lv_bunker_index];
            if ((gv_bunker_merc_status[lv_bunker_index] == true)) {
                if ((lv_unit_type == "Marine")) {
                    lv_unit_type = "WarPig";
                }
                else if ((lv_unit_type == "Reaper")) {
                    lv_unit_type = "MercReaper";
                }
                else if ((lv_unit_type == "Marauder")) {
                    lv_unit_type = "HammerSecurity";
                }
                else if ((lv_unit_type == "Ghost")) {
                    lv_unit_type = "Spectre";
                }
            }

            UnitCreate(1, lv_unit_type, 0, lv_bunker_owner, gv_bunker_locations[lv_bunker_index], 270.0);
            UnitControlGroupAddUnit(lv_bunker_owner, 1, UnitLastCreated());
            if ((gv_bunker_rally_points[lv_bunker_index] != null)) {
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), gv_bunker_rally_points[lv_bunker_index]), c_orderQueueReplace);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnUnit_Init () {
    gt_SpawnUnit = TriggerCreate("gt_SpawnUnit_Func");
    TriggerAddEventTimePeriodic(gt_SpawnUnit, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: OnRallyChange
//--------------------------------------------------------------------------------------------------
bool gt_OnRallyChange_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "Bunker") || (UnitGetType(EventUnit()) == "MercenaryBunker")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_bunker_rally_points[gf_GetBunkerIndex(EventUnit())] = UnitRallyPointTargetPoint(EventUnit(), 1, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OnRallyChange_Init () {
    gt_OnRallyChange = TriggerCreate("gt_OnRallyChange_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: OnUpgrade
//--------------------------------------------------------------------------------------------------
bool gt_OnUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(35.0, c_timeGame);
    gv_bunker_merc_status[gf_GetBunkerIndex(EventUnit())] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OnUpgrade_Init () {
    gt_OnUpgrade = TriggerCreate("gt_OnUpgrade_Func");
    TriggerAddEventUnitAbility(gt_OnUpgrade, null, AbilityCommand("UpgradeToOrbital", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BunkerConstructionCompleted
//--------------------------------------------------------------------------------------------------
bool gt_BunkerBuild_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) == "Bunker"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_OnBunkerCreated(EventPlayer(), EventUnitProgressUnit()) == true)) {
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BunkerBuild_Init () {
    gt_BunkerBuild = TriggerCreate("gt_BunkerBuild_Func");
    TriggerAddEventUnitConstructProgress(gt_BunkerBuild, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BunkerDied
//--------------------------------------------------------------------------------------------------
bool gt_BunkerDestoryed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Bunker"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_OnBunkerRemoved(EventPlayer(), EventUnit()) == true)) {
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BunkerDestoryed_Init () {
    gt_BunkerDestoryed = TriggerCreate("gt_BunkerDestoryed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: OnScvDied
//--------------------------------------------------------------------------------------------------
bool gt_ScvDied_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnPosition;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "SCV"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = UnitGetOwner(EventUnit());
    lv_spawnPosition = UnitGetPosition(EventUnit());
    Wait(5.0, c_timeGame);
    UnitCreate(1, "SCV", 0, lv_player, UnitGetPosition(UnitGroupClosestToPoint(gv_structuresGroup[lv_player], lv_spawnPosition)), 270.0);
    if ((gf_OnBunkerCreated2(UnitLastCreated()) == true)) {
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScvDied_Init () {
    gt_ScvDied = TriggerCreate("gt_ScvDied_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ShardSpawn
//--------------------------------------------------------------------------------------------------
bool gt_ShardSpawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "MineralCrystal", 0, 0, RegionRandomPoint(RegionFromId(1)), 270.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShardSpawn_Init () {
    gt_ShardSpawn = TriggerCreate("gt_ShardSpawn_Func");
    TriggerAddEventTimePeriodic(gt_ShardSpawn, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MineralTrickle
//--------------------------------------------------------------------------------------------------
bool gt_MineralTrickle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup auto52F9A234_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto52F9A234_g = PlayerGroupAll();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto52F9A234_g, lv_player);
        if (lv_player < 0) { break; }
        PlayerModifyPropertyInt(lv_player, c_playerPropMinerals, c_playerPropOperAdd, 5);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MineralTrickle_Init () {
    gt_MineralTrickle = TriggerCreate("gt_MineralTrickle_Func");
    TriggerAddEventTimePeriodic(gt_MineralTrickle, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_MeleeInitialization_Init();
    gt_SpawnUnit_Init();
    gt_OnRallyChange_Init();
    gt_OnUpgrade_Init();
    gt_BunkerBuild_Init();
    gt_BunkerDestoryed_Init();
    gt_ScvDied_Init();
    gt_ShardSpawn_Init();
    gt_MineralTrickle_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
