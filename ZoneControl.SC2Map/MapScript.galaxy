//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Zone Control CE
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/SwarmLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libHots_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
playergroup gv_all_players;
int gv_num_teams;
int gv_players_per_team;
int gv_untitledVariable001;
point[9] gv_engineering_bay_positions;
unit[10] gv_ghost_academies;
point[9] gv_initial_bunker_positions;
point[9] gv_nuke_silo_positions;
fixed gv_total_wagers;
fixed[10] gv_player_elos;
int[10] gv_player_wins;
int[10] gv_player_games;
int[10] gv_player_mode_games;
int[10] gv_player_mode_wins;
fixed[10] gv_player_elos_wagers;
fixed[6] gv_team_elo_sums;
fixed[6] gv_team_elo_averages;
string gv_game_mode_string;
bool gv_full_game;
bank[10] gv_banks;
fixed[10][3] gv_player_spawn_offsets;
int[10] gv_player_shards_collected;
timer gv_game_timer;
bool[10] gv_player_alive;
bool[10] gv_team_alive;
int[61] gv_spawn_scan_order;
unit[65] gv_bunkers;
point[65] gv_bunker_rally_points;
bool[65] gv_bunker_merc_status;
bool[65] gv_bunker_retire_status;
string[65] gv_bunker_base_unit_type;
int[10] gv_player_team;
int[9] gv_position_players;
int[10] gv_player_positions;
int[65] gv_bunker_owners;
point[65] gv_bunker_locations;
color[10] gv_player_colors;
int[5][5] gv_player_team_rank;
int[5] gv_team_rank;
int[9] gv_player_scores;
int[10] gv_leaderboard_player_frames;
int[10] gv_leaderboard_player_scores;
int[10] gv_leaderboard_player_names;
int[5] gv_leaderboard_team_score_dialog_item;
int[5] gv_leaderboard_team_frames;
int[5] gv_leaderboard_team_name_dialog_item;
int[5] gv_leaderboard_team_dialog_item;
int[5] gv_leaderboard_team_scores;
int gv_untitledVariable002;
int gv_untitledVariable003;
bool gv_message_lock;
int gv_num_messages;
text[51] gv_messages;
unitgroup[9] gv_structuresGroup;

void InitGlobals () {
    int init_i;

    gv_all_players = PlayerGroupEmpty();
    for (init_i = 0; init_i <= 9; init_i += 1) {
        gv_player_elos[init_i] = 1000.0;
    }
    gv_game_mode_string = "";
    gv_game_timer = TimerCreate();
    for (init_i = 0; init_i <= 9; init_i += 1) {
        gv_player_colors[init_i] = Color(0,0,0);
    }
    for (init_i = 0; init_i <= 9; init_i += 1) {
        gv_leaderboard_player_frames[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 9; init_i += 1) {
        gv_leaderboard_player_scores[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 9; init_i += 1) {
        gv_leaderboard_player_names[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_leaderboard_team_score_dialog_item[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_leaderboard_team_frames[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_leaderboard_team_name_dialog_item[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_leaderboard_team_dialog_item[init_i] = c_invalidDialogControlId;
    }
    gv_untitledVariable002 = 100;
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_structuresGroup[init_i] = UnitGroupEmpty();
    }
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_AssignTeamLocations ();
void gf_SpawnPlayers ();
void gf_SaveBankIfFullGame (int lp_player);
void gf_RecordUpdateGameStart ();
void gf_RecordUpdateGameVictory (int lp_player);
void gf_UpdatePlayerColor (int lp_player);
void gf_LeaderboardInit ();
void gf_UpdateLeaderboardSortOrder ();
void gf_UpdateLeaderboard (bool lp_force_update_sort);
void gf_RedrawDeathNotifications ();
void gf_NotifyPlayerDied (int lp_palyer);
void gf_NotifyPlayerLeave (int lp_palyer);
void gf_AddMessage (text lp_message);
int gf_GetBunkerIndex (unit lp_bunker);
void gf_OnBunkerCreated (int lp_player, unit lp_bunker);
void gf_OnBunkerCreated3 (unit lp_bunker);
void gf_OnBunkerCreated2 (unit lp_worker);
void gf_OnBunkerRemoved (int lp_player, unit lp_bunker);
void gf_UpdateAllWorkers (int lp_player);
bool gf_PlayerHasNuke (int lp_player);
void gf_TestVictory ();
void gf_OnPlayerDead (int lp_player);
void gf_TestPlayerDead (int lp_player);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_MeleeInitialization;
trigger gt_Records;
trigger gt_LeaderboardPeriodicRefresh;
trigger gt_ShardCollected;
trigger gt_ShardSpawn;
trigger gt_SpawnUnit;
trigger gt_OnRallyChange;
trigger gt_OnUpgrade;
trigger gt_BunkerBuild;
trigger gt_BunkerBuild2;
trigger gt_BunkerDestoryed;
trigger gt_ScvDied;
trigger gt_OnRetire;
trigger gt_OnUnretire;
trigger gt_ScvCalldown;
trigger gt_ArmNuke;
trigger gt_PlayerLeaveGame;
trigger gt_MineralTrickle;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_AssignTeamLocations () {
    int init_i;

    // Variable Declarations
    int lv_team_index2;
    int lv_team_index;
    int lv_size;
    int lv_swap_player;
    int lv_loop;
    int lv_team1;
    int lv_team2;
    int lv_position;
    int lv_slot_on_team;
    int[6][5] lv_team_placement;
    string lv_mode;
    int lv_current_slot;
    int lv_team;
    int[6][5] lv_lobby_teams;
    int[6] lv_lobby_team_size;
    playergroup[5] lv_teams;
    int lv_player2;
    string lv_attribute_value;
    int lv_player;

    // Automatic Variable Declarations
    int auto9FAF47CB_ae;
    const int auto9FAF47CB_ai = 1;
    playergroup auto41ED98CC_g;
    const int auto12FB2DF6_ae = 30;
    const int auto12FB2DF6_ai = 1;
    int auto5E950BE3_ae;
    const int auto5E950BE3_ai = 1;
    const int autoC52415DB_ae = 5;
    const int autoC52415DB_ai = 1;
    const int autoD1F51475_ae = 10;
    const int autoD1F51475_ai = 1;
    const int auto2970EC11_ae = 3;
    const int auto2970EC11_ai = 1;
    int auto6372DA87_ae;
    const int auto6372DA87_ai = 1;
    int auto75E4F2FB_ae;
    const int auto75E4F2FB_ai = 1;
    playergroup auto49CACD5C_g;
    const int autoAED5DE55_ae = 8;
    const int autoAED5DE55_ai = 1;
    const int autoECC6457B_ae = 8;
    const int autoECC6457B_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lv_teams[init_i] = PlayerGroupEmpty();
    }

    // Implementation
    lv_mode = GameAttributeGameValue("1");
    if ((lv_mode == "0001")) {
        gv_game_mode_string = "2v2v2v2";
        gv_num_teams = 4;
        gv_players_per_team = 2;
        lv_team_placement[1][0] = 0;
        lv_team_placement[1][1] = 1;
        lv_team_placement[2][0] = 2;
        lv_team_placement[2][1] = 3;
        lv_team_placement[3][0] = 4;
        lv_team_placement[3][1] = 5;
        lv_team_placement[4][0] = 6;
        lv_team_placement[4][1] = 7;
    }
    else if ((lv_mode == "0002")) {
        gv_game_mode_string = "4v4";
        gv_num_teams = 2;
        gv_players_per_team = 4;
        lv_team_placement[1][0] = 0;
        lv_team_placement[1][1] = 1;
        lv_team_placement[1][2] = 4;
        lv_team_placement[1][3] = 5;
        lv_team_placement[2][0] = 2;
        lv_team_placement[2][1] = 3;
        lv_team_placement[2][2] = 6;
        lv_team_placement[2][3] = 7;
    }
    else if ((lv_mode == "0003")) {
        gv_game_mode_string = "1v1v1v1";
        gv_num_teams = 4;
        gv_players_per_team = 1;
        lv_team_placement[1][0] = 0;
        lv_team_placement[2][0] = 2;
        lv_team_placement[3][0] = 4;
        lv_team_placement[4][0] = 6;
    }
    else if ((lv_mode == "0004")) {
        gv_game_mode_string = "2v2";
        gv_num_teams = 2;
        gv_players_per_team = 2;
        lv_team_placement[1][0] = 0;
        lv_team_placement[1][1] = 4;
        lv_team_placement[2][0] = 2;
        lv_team_placement[2][1] = 6;
    }
    else if ((lv_mode == "0005")) {
        gv_game_mode_string = "1v1";
        gv_num_teams = 2;
        gv_players_per_team = 1;
        lv_team_placement[1][0] = 1;
        lv_team_placement[2][0] = 2;
    }
    auto9FAF47CB_ae = gv_num_teams;
    lv_team = 1;
    for ( ; ( (auto9FAF47CB_ai >= 0 && lv_team <= auto9FAF47CB_ae) || (auto9FAF47CB_ai < 0 && lv_team >= auto9FAF47CB_ae) ) ; lv_team += auto9FAF47CB_ai ) {
        auto41ED98CC_g = GameAttributePlayersForTeam(lv_team);
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(auto41ED98CC_g, lv_player);
            if (lv_player < 0) { break; }
            lv_lobby_teams[lv_team][lv_lobby_team_size[lv_team]] = lv_player;
            lv_lobby_team_size[lv_team] = (lv_lobby_team_size[lv_team] + 1);
        }
    }
    if ((GameAttributeGameValue("3") == "0001")) {
        lv_loop = 1;
        for ( ; ( (auto12FB2DF6_ai >= 0 && lv_loop <= auto12FB2DF6_ae) || (auto12FB2DF6_ai < 0 && lv_loop >= auto12FB2DF6_ae) ) ; lv_loop += auto12FB2DF6_ai ) {
            lv_team1 = RandomInt(1, gv_num_teams);
            lv_team2 = RandomInt(1, gv_num_teams);
            lv_team_index = RandomInt(0, (lv_lobby_team_size[lv_team1] - 1));
            lv_team_index2 = RandomInt(0, (lv_lobby_team_size[lv_team2] - 1));
            if (((lv_lobby_teams[lv_team1][lv_team_index] > 0) && (lv_lobby_teams[lv_team2][lv_team_index2] > 0))) {
                lv_swap_player = lv_lobby_teams[lv_team1][lv_team_index];
                lv_lobby_teams[lv_team1][lv_team_index] = lv_lobby_teams[lv_team2][lv_team_index2];
                lv_lobby_teams[lv_team2][lv_team_index2] = lv_swap_player;
            }

        }
    }
    else if ((GameAttributeGameValue("2") == "0001")) {
        auto5E950BE3_ae = gv_num_teams;
        lv_team = 1;
        for ( ; ( (auto5E950BE3_ai >= 0 && lv_team <= auto5E950BE3_ae) || (auto5E950BE3_ai < 0 && lv_team >= auto5E950BE3_ae) ) ; lv_team += auto5E950BE3_ai ) {
            lv_loop = 1;
            for ( ; ( (autoC52415DB_ai >= 0 && lv_loop <= autoC52415DB_ae) || (autoC52415DB_ai < 0 && lv_loop >= autoC52415DB_ae) ) ; lv_loop += autoC52415DB_ai ) {
                lv_team_index = RandomInt(0, (lv_lobby_team_size[lv_team] - 1));
                lv_team_index2 = RandomInt(0, (lv_lobby_team_size[lv_team] - 1));
                lv_swap_player = lv_lobby_teams[lv_team][lv_team_index];
                lv_lobby_teams[lv_team][lv_team_index] = lv_lobby_teams[lv_team][lv_team_index2];
                lv_lobby_teams[lv_team][lv_team_index2] = lv_swap_player;
            }
        }
        lv_loop = 1;
        for ( ; ( (autoD1F51475_ai >= 0 && lv_loop <= autoD1F51475_ae) || (autoD1F51475_ai < 0 && lv_loop >= autoD1F51475_ae) ) ; lv_loop += autoD1F51475_ai ) {
            lv_team1 = RandomInt(1, gv_num_teams);
            lv_team2 = RandomInt(1, gv_num_teams);
            lv_team_index = 0;
            for ( ; ( (auto2970EC11_ai >= 0 && lv_team_index <= auto2970EC11_ae) || (auto2970EC11_ai < 0 && lv_team_index >= auto2970EC11_ae) ) ; lv_team_index += auto2970EC11_ai ) {
                lv_swap_player = lv_lobby_teams[lv_team1][lv_team_index];
                lv_lobby_teams[lv_team1][lv_team_index] = lv_lobby_teams[lv_team2][lv_team_index];
                lv_lobby_teams[lv_team2][lv_team_index] = lv_swap_player;
            }
        }
    }
    auto6372DA87_ae = gv_num_teams;
    lv_team = 0;
    for ( ; ( (auto6372DA87_ai >= 0 && lv_team <= auto6372DA87_ae) || (auto6372DA87_ai < 0 && lv_team >= auto6372DA87_ae) ) ; lv_team += auto6372DA87_ai ) {
        lv_current_slot = 0;
        auto75E4F2FB_ae = (lv_lobby_team_size[lv_team] - 1);
        lv_team_index = 0;
        for ( ; ( (auto75E4F2FB_ai >= 0 && lv_team_index <= auto75E4F2FB_ae) || (auto75E4F2FB_ai < 0 && lv_team_index >= auto75E4F2FB_ae) ) ; lv_team_index += auto75E4F2FB_ai ) {
            lv_player = lv_lobby_teams[lv_team][lv_team_index];
            if (((PlayerType(lv_player) == c_playerTypeUser) || (PlayerType(lv_player) == c_playerTypeComputer))) {
                lv_position = lv_team_placement[lv_team][lv_current_slot];
                gv_position_players[lv_position] = lv_player;
                gv_player_positions[lv_player] = lv_position;
                lv_current_slot = (lv_current_slot + 1);
                gv_player_team[lv_player] = (lv_team - 1);
                PlayerGroupAdd(lv_teams[gv_player_team[lv_player]], lv_player);
            }

        }
    }
    auto49CACD5C_g = PlayerGroupAll();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto49CACD5C_g, lv_player);
        if (lv_player < 0) { break; }
        if (((PlayerType(lv_player) == c_playerTypeUser) || (PlayerType(lv_player) == c_playerTypeComputer))) {
            PlayerGroupAdd(gv_all_players, lv_player);
        }

    }
    UISetResourceTradingAllowed(c_resourceTypeMinerals, true);
    UISetResourceTradingAllowed(c_resourceTypeVespene, false);
    UISetResourceTradeCountdownTime(10);
    UISetResourceTradeCountdownTime(10);
    lv_player = 1;
    for ( ; ( (autoAED5DE55_ai >= 0 && lv_player <= autoAED5DE55_ae) || (autoAED5DE55_ai < 0 && lv_player >= autoAED5DE55_ae) ) ; lv_player += autoAED5DE55_ai ) {
        if (((PlayerType(lv_player) == c_playerTypeUser) || (PlayerType(lv_player) == c_playerTypeComputer))) {
            lv_player2 = 1;
            for ( ; ( (autoECC6457B_ai >= 0 && lv_player2 <= autoECC6457B_ae) || (autoECC6457B_ai < 0 && lv_player2 >= autoECC6457B_ae) ) ; lv_player2 += autoECC6457B_ai ) {
                if ((((PlayerType(lv_player) == c_playerTypeUser) || (PlayerType(lv_player) == c_playerTypeComputer)) && (lv_player2 != lv_player))) {
                    if (((gv_player_team[lv_player] == gv_player_team[lv_player2]))) {
                        libNtve_gf_SetAlliance(lv_player, lv_player2, libNtve_ge_AllianceSetting_Ally);
                        PlayerSetAlliance(lv_player, c_allianceIdVision, lv_player2, true);
                        PlayerSetAlliance(lv_player2, c_allianceIdVision, lv_player, true);
                    }
                    else {
                        PlayerSetAlliance(lv_player, c_allianceIdVision, lv_player2, false);
                        libNtve_gf_SetAlliance(lv_player, lv_player2, libNtve_ge_AllianceSetting_Enemy);
                    }
                }
            }
        }
    }
}

void gf_SpawnPlayers () {
    // Variable Declarations
    unit lv_unit;
    fixed[9][3] lv_position_spawn_offsets;
    int lv_player;
    int lv_position;

    // Automatic Variable Declarations
    const int auto5A7C1BEA_ae = 8;
    const int auto5A7C1BEA_ai = 1;

    // Variable Initialization

    // Implementation
    gv_bunker_base_unit_type[0] = "Marine";
    gv_bunker_base_unit_type[1] = "Marine";
    gv_bunker_base_unit_type[2] = "Marine";
    gv_bunker_base_unit_type[3] = "Marine";
    gv_bunker_base_unit_type[4] = "Marine";
    gv_bunker_base_unit_type[5] = "Marine";
    gv_bunker_base_unit_type[6] = "Marine";
    gv_bunker_base_unit_type[7] = "Marine";
    gv_bunker_base_unit_type[8] = "Marine";
    gv_bunker_base_unit_type[9] = "Reaper";
    gv_bunker_base_unit_type[10] = "Reaper";
    gv_bunker_base_unit_type[11] = "Reaper";
    gv_bunker_base_unit_type[12] = "Reaper";
    gv_bunker_base_unit_type[13] = "Reaper";
    gv_bunker_base_unit_type[14] = "Reaper";
    gv_bunker_base_unit_type[15] = "Marine";
    gv_bunker_base_unit_type[16] = "Marine";
    gv_bunker_base_unit_type[17] = "Reaper";
    gv_bunker_base_unit_type[18] = "Marauder";
    gv_bunker_base_unit_type[19] = "Marauder";
    gv_bunker_base_unit_type[20] = "Marauder";
    gv_bunker_base_unit_type[21] = "Marauder";
    gv_bunker_base_unit_type[22] = "Reaper";
    gv_bunker_base_unit_type[23] = "Marine";
    gv_bunker_base_unit_type[24] = "Marine";
    gv_bunker_base_unit_type[25] = "Reaper";
    gv_bunker_base_unit_type[26] = "Marauder";
    gv_bunker_base_unit_type[27] = "Ghost";
    gv_bunker_base_unit_type[28] = "Ghost";
    gv_bunker_base_unit_type[29] = "Marauder";
    gv_bunker_base_unit_type[30] = "Reaper";
    gv_bunker_base_unit_type[31] = "Marine";
    gv_bunker_base_unit_type[32] = "Marine";
    gv_bunker_base_unit_type[33] = "Reaper";
    gv_bunker_base_unit_type[34] = "Marauder";
    gv_bunker_base_unit_type[35] = "Ghost";
    gv_bunker_base_unit_type[36] = "Ghost";
    gv_bunker_base_unit_type[37] = "Marauder";
    gv_bunker_base_unit_type[38] = "Reaper";
    gv_bunker_base_unit_type[39] = "Marine";
    gv_bunker_base_unit_type[40] = "Marine";
    gv_bunker_base_unit_type[41] = "Reaper";
    gv_bunker_base_unit_type[42] = "Marauder";
    gv_bunker_base_unit_type[43] = "Marauder";
    gv_bunker_base_unit_type[44] = "Marauder";
    gv_bunker_base_unit_type[45] = "Marauder";
    gv_bunker_base_unit_type[46] = "Reaper";
    gv_bunker_base_unit_type[47] = "Marine";
    gv_bunker_base_unit_type[48] = "Marine";
    gv_bunker_base_unit_type[49] = "Reaper";
    gv_bunker_base_unit_type[50] = "Reaper";
    gv_bunker_base_unit_type[51] = "Reaper";
    gv_bunker_base_unit_type[52] = "Reaper";
    gv_bunker_base_unit_type[53] = "Reaper";
    gv_bunker_base_unit_type[54] = "Reaper";
    gv_bunker_base_unit_type[55] = "Marine";
    gv_bunker_base_unit_type[56] = "Marine";
    gv_bunker_base_unit_type[57] = "Marine";
    gv_bunker_base_unit_type[58] = "Marine";
    gv_bunker_base_unit_type[59] = "Marine";
    gv_bunker_base_unit_type[60] = "Marine";
    gv_bunker_base_unit_type[61] = "Marine";
    gv_bunker_base_unit_type[62] = "Marine";
    gv_bunker_base_unit_type[63] = "Marine";
    gv_spawn_scan_order[0] = 1;
    gv_spawn_scan_order[1] = 6;
    gv_spawn_scan_order[2] = 15;
    gv_spawn_scan_order[3] = 55;
    gv_spawn_scan_order[4] = 62;
    gv_spawn_scan_order[5] = 57;
    gv_spawn_scan_order[6] = 48;
    gv_spawn_scan_order[7] = 8;
    gv_spawn_scan_order[8] = 2;
    gv_spawn_scan_order[9] = 5;
    gv_spawn_scan_order[10] = 23;
    gv_spawn_scan_order[11] = 47;
    gv_spawn_scan_order[12] = 61;
    gv_spawn_scan_order[13] = 58;
    gv_spawn_scan_order[14] = 40;
    gv_spawn_scan_order[15] = 16;
    gv_spawn_scan_order[16] = 3;
    gv_spawn_scan_order[17] = 4;
    gv_spawn_scan_order[18] = 31;
    gv_spawn_scan_order[19] = 39;
    gv_spawn_scan_order[20] = 59;
    gv_spawn_scan_order[21] = 60;
    gv_spawn_scan_order[22] = 32;
    gv_spawn_scan_order[23] = 24;
    gv_spawn_scan_order[24] = 9;
    gv_spawn_scan_order[25] = 14;
    gv_spawn_scan_order[26] = 54;
    gv_spawn_scan_order[27] = 49;
    gv_spawn_scan_order[28] = 10;
    gv_spawn_scan_order[29] = 13;
    gv_spawn_scan_order[30] = 22;
    gv_spawn_scan_order[31] = 46;
    gv_spawn_scan_order[32] = 53;
    gv_spawn_scan_order[33] = 50;
    gv_spawn_scan_order[34] = 41;
    gv_spawn_scan_order[35] = 17;
    gv_spawn_scan_order[36] = 11;
    gv_spawn_scan_order[37] = 12;
    gv_spawn_scan_order[38] = 30;
    gv_spawn_scan_order[39] = 38;
    gv_spawn_scan_order[40] = 52;
    gv_spawn_scan_order[41] = 51;
    gv_spawn_scan_order[42] = 33;
    gv_spawn_scan_order[43] = 25;
    gv_spawn_scan_order[44] = 18;
    gv_spawn_scan_order[45] = 21;
    gv_spawn_scan_order[46] = 45;
    gv_spawn_scan_order[47] = 42;
    gv_spawn_scan_order[48] = 19;
    gv_spawn_scan_order[49] = 20;
    gv_spawn_scan_order[50] = 29;
    gv_spawn_scan_order[51] = 37;
    gv_spawn_scan_order[52] = 44;
    gv_spawn_scan_order[53] = 43;
    gv_spawn_scan_order[54] = 34;
    gv_spawn_scan_order[55] = 26;
    gv_spawn_scan_order[56] = 27;
    gv_spawn_scan_order[57] = 28;
    gv_spawn_scan_order[58] = 36;
    gv_spawn_scan_order[59] = 35;
    gv_engineering_bay_positions[0] = Point(18.5, 88.5);
    gv_engineering_bay_positions[1] = Point(21.5, 92.5);
    gv_engineering_bay_positions[2] = Point(90.5, 90.5);
    gv_engineering_bay_positions[3] = Point(93.5, 88.5);
    gv_engineering_bay_positions[4] = Point(93.5, 19.5);
    gv_engineering_bay_positions[5] = Point(90.5, 17.5);
    gv_engineering_bay_positions[6] = Point(21.5, 17.5);
    gv_engineering_bay_positions[7] = Point(18.5, 19.5);
    gv_nuke_silo_positions[0] = Point(16.5, 91.5);
    gv_nuke_silo_positions[1] = Point(19.5, 93.5);
    gv_nuke_silo_positions[2] = Point(92.5, 93.5);
    gv_nuke_silo_positions[3] = Point(95.5, 91.5);
    gv_nuke_silo_positions[4] = Point(95.5, 16.5);
    gv_nuke_silo_positions[5] = Point(92.5, 14.5);
    gv_nuke_silo_positions[6] = Point(19.5, 14.5);
    gv_nuke_silo_positions[7] = Point(16.5, 16.5);
    gv_initial_bunker_positions[0] = Point(20.5, 79.5);
    gv_initial_bunker_positions[1] = Point(30.5, 89.5);
    gv_initial_bunker_positions[2] = Point(81.5, 89.5);
    gv_initial_bunker_positions[3] = Point(91.5, 79.5);
    gv_initial_bunker_positions[4] = Point(91.5, 28.5);
    gv_initial_bunker_positions[5] = Point(81.5, 18.5);
    gv_initial_bunker_positions[6] = Point(30.5, 18.5);
    gv_initial_bunker_positions[7] = Point(20.5, 28.5);
    lv_position_spawn_offsets[0][0] = 1.0;
    lv_position_spawn_offsets[1][0] = 1.0;
    lv_position_spawn_offsets[2][0] = -1.0;
    lv_position_spawn_offsets[3][0] = -1.0;
    lv_position_spawn_offsets[4][0] = -1.0;
    lv_position_spawn_offsets[5][0] = -1.0;
    lv_position_spawn_offsets[6][0] = 1.0;
    lv_position_spawn_offsets[7][0] = 1.0;
    lv_position_spawn_offsets[0][1] = -1.0;
    lv_position_spawn_offsets[1][1] = -1.0;
    lv_position_spawn_offsets[2][1] = -1.0;
    lv_position_spawn_offsets[3][1] = -1.0;
    lv_position_spawn_offsets[4][1] = 1.0;
    lv_position_spawn_offsets[5][1] = 1.0;
    lv_position_spawn_offsets[6][1] = 1.0;
    lv_position_spawn_offsets[7][1] = 1.0;
    lv_player = 1;
    for ( ; ( (auto5A7C1BEA_ai >= 0 && lv_player <= auto5A7C1BEA_ae) || (auto5A7C1BEA_ai < 0 && lv_player >= auto5A7C1BEA_ae) ) ; lv_player += auto5A7C1BEA_ai ) {
        if (((PlayerType(lv_player) == c_playerTypeUser) || (PlayerType(lv_player) == c_playerTypeComputer))) {
            lv_position = gv_player_positions[lv_player];
            gv_player_spawn_offsets[lv_player][0] = lv_position_spawn_offsets[lv_position][0];
            gv_player_spawn_offsets[lv_player][1] = lv_position_spawn_offsets[lv_position][1];
            gv_player_alive[lv_player] = true;
            gv_team_alive[gv_player_team[lv_player]] = true;
            VisRevealArea(gv_position_players[lv_position], RegionEntireMap(), 0.1, false);
            UnitCreate(1, "GhostAcademy", c_unitCreateIgnorePlacement, lv_player, gv_nuke_silo_positions[lv_position], 270.0);
            UnitControlGroupAddUnit(lv_player, 4, UnitLastCreated());
            gv_ghost_academies[lv_player] = UnitLastCreated();
            UnitCreate(1, "EngineeringBay", c_unitCreateIgnorePlacement, lv_player, gv_engineering_bay_positions[lv_position], 270.0);
            UnitControlGroupAddUnit(lv_player, 4, UnitLastCreated());
            UnitCreate(1, "Bunker", c_unitCreateIgnorePlacement, lv_player, gv_initial_bunker_positions[lv_position], 270.0);
            CameraPan(lv_player, gv_initial_bunker_positions[lv_position], 0.01, -1, 10.0, false);
            lv_unit = UnitLastCreated();
            gf_OnBunkerCreated3(lv_unit);
            gf_OnBunkerCreated(lv_player, lv_unit);
            UnitCreate(1, "SCV", 0, lv_player, PointWithOffset(gv_initial_bunker_positions[lv_position], (-4.0 * lv_position_spawn_offsets[lv_position][0]), (-4.0 * lv_position_spawn_offsets[lv_position][1])), 270.0);
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
            lv_unit = UnitLastCreated();
            gf_OnBunkerCreated2(lv_unit);
            libNtve_gf_AttachModelToUnit(UnitLastCreated(), "SS_PowerupStrongerMissiles", "Ref_Hardpoint");
            libHots_gf_StoreActorForUnit(UnitLastCreated(), 1, libNtve_gf_ActorLastCreated());
        }
    }
}

void gf_SaveBankIfFullGame (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_full_game == true)) {
        BankSave(gv_banks[lp_player]);
    }

}

void gf_RecordUpdateGameStart () {
    // Variable Declarations
    text lv_message;
    int lv_real_player_count;
    fixed lv_r1;
    fixed lv_r2;
    fixed lv_e1;
    int lv_team;
    fixed lv_average_team_elo;
    fixed lv_average_opponent_elo;
    fixed lv_total_elo;
    int lv_player;

    // Automatic Variable Declarations
    const int auto32B0AE78_ae = 8;
    const int auto32B0AE78_ai = 1;
    playergroup autoB2E70265_g;
    playergroup auto63DE3FB6_g;
    playergroup auto11B949D1_g;

    // Variable Initialization

    // Implementation
    lv_player = 1;
    for ( ; ( (auto32B0AE78_ai >= 0 && lv_player <= auto32B0AE78_ae) || (auto32B0AE78_ai < 0 && lv_player >= auto32B0AE78_ae) ) ; lv_player += auto32B0AE78_ai ) {
        if ((PlayerType(lv_player) == c_playerTypeUser)) {
            lv_real_player_count = (lv_real_player_count + 1);
        }

    }
    if ((lv_real_player_count != (gv_num_teams * gv_players_per_team))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/CFE0085C"));
    }
    else {
        gv_full_game = true;
    }
    autoB2E70265_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoB2E70265_g, lv_player);
        if (lv_player < 0) { break; }
        lv_team = gv_player_team[lv_player];
        BankLoad("ZoneControlCE", lv_player);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        if ((BankVerify(BankLastCreated()) == true)) {
        }
        else {
            BankSectionRemove(BankLastCreated(), "Player");
        }
        gv_banks[lv_player] = BankLastCreated();
        gv_player_games[lv_player] = BankValueGetAsInt(BankLastCreated(), "Player", "games");
        gv_player_wins[lv_player] = BankValueGetAsInt(BankLastCreated(), "Player", "wins");
        gv_player_mode_wins[lv_player] = BankValueGetAsInt(BankLastCreated(), "Player", ("wins" + gv_game_mode_string));
        BankValueSetFromInt(BankLastCreated(), "Player", "games", (gv_player_games[lv_player] + 1));
        gv_player_mode_games[lv_player] = BankValueGetAsInt(BankLastCreated(), "Player", ("games" + gv_game_mode_string));
        BankValueSetFromInt(BankLastCreated(), "Player", ("games" + gv_game_mode_string), (gv_player_mode_games[lv_player] + 1));
        if ((BankKeyExists(BankLastCreated(), "Player", ("elo" + gv_game_mode_string)) == true)) {
            gv_player_elos[lv_player] = BankValueGetAsFixed(BankLastCreated(), "Player", "elo");
        }

        gv_team_elo_sums[lv_team] = (gv_team_elo_sums[lv_team] + gv_player_elos[lv_player]);
        lv_total_elo = (lv_total_elo + gv_player_elos[lv_player]);
        gf_SaveBankIfFullGame(lv_player);
    }
    auto63DE3FB6_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto63DE3FB6_g, lv_player);
        if (lv_player < 0) { break; }
        lv_team = gv_player_team[lv_player];
        gv_team_elo_averages[lv_team] = (gv_team_elo_sums[lv_team] / gv_players_per_team);
        lv_average_opponent_elo = ((lv_total_elo - gv_team_elo_sums[lv_team]) / ((gv_num_teams - 1) * gv_players_per_team));
        lv_r1 = Pow(10.0, (gv_team_elo_averages[lv_team] / 400.0));
        lv_r2 = Pow(10.0, (lv_average_opponent_elo / 400.0));
        lv_e1 = (lv_r1 / (lv_r1 + lv_r2));
        gv_player_elos_wagers[lv_player] = ((6.0 * lv_e1) / 1.0);
        gv_total_wagers = (gv_total_wagers + gv_player_elos_wagers[lv_player]);
        BankValueSetFromFixed(gv_banks[lv_player], "Player", ("elo" + gv_game_mode_string), (gv_player_elos[lv_player] - gv_player_elos_wagers[lv_player]));
        gf_SaveBankIfFullGame(lv_player);
    }
    auto11B949D1_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto11B949D1_g, lv_player);
        if (lv_player < 0) { break; }
        lv_message = (StringToText("") + StringExternal("Param/Value/AD714ED6"));
        lv_message = (lv_message + TextWithColor(FixedToTextAdvanced(((gv_total_wagers / gv_players_per_team) - gv_player_elos_wagers[lv_player]), c_formatNumberStyleNormal, true, 2, 2), libNtve_gf_ConvertPlayerColorToColor(13)));
        lv_message = (lv_message + StringExternal("Param/Value/911BE273"));
        lv_message = (lv_message + TextWithColor(FixedToTextAdvanced(gv_player_elos_wagers[lv_player], c_formatNumberStyleNormal, true, 2, 2), libNtve_gf_ConvertPlayerColorToColor(1)));
        UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaChat, lv_message);
    }
}

void gf_RecordUpdateGameVictory (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    BankValueSetFromInt(gv_banks[lp_player], "Player", "wins", (gv_player_wins[lp_player] + 1));
    BankValueSetFromInt(gv_banks[lp_player], "Player", ("wins" + gv_game_mode_string), (gv_player_mode_wins[lp_player] + 1));
    BankValueSetFromFixed(gv_banks[lp_player], "Player", ("elo" + gv_game_mode_string), ((gv_player_elos[lp_player] - gv_player_elos_wagers[lp_player]) + (gv_total_wagers / gv_players_per_team)));
    gf_SaveBankIfFullGame(lp_player);
}

void gf_UpdatePlayerColor (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemColor(gv_leaderboard_player_names[lp_player], gv_player_colors[lp_player], PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_leaderboard_player_scores[lp_player], gv_player_colors[lp_player], PlayerGroupAll());
}

void gf_LeaderboardInit () {
    // Variable Declarations
    int[5] lv_current_team_rank;
    int lv_current_rank;
    int lv_globalDialog;
    int lv_teamFrame;
    int lv_playerFrame;
    int lv_player;
    int lv_team;

    // Automatic Variable Declarations
    int autoAFDD36F3_ae;
    const int autoAFDD36F3_ai = 1;
    const int autoF075F969_ae = 8;
    const int autoF075F969_ai = 1;

    // Variable Initialization
    lv_globalDialog = c_invalidDialogId;
    lv_teamFrame = c_invalidDialogControlId;
    lv_playerFrame = c_invalidDialogControlId;

    // Implementation
    DialogCreate(350, 400, c_anchorTopRight, 10, 70, true);
    lv_globalDialog = DialogLastCreated();
    DialogSetImageVisible(lv_globalDialog, false);
    DialogSetVisible(lv_globalDialog, PlayerGroupAll(), true);
    autoAFDD36F3_ae = (gv_num_teams - 1);
    lv_team = 0;
    for ( ; ( (autoAFDD36F3_ai >= 0 && lv_team <= autoAFDD36F3_ae) || (autoAFDD36F3_ai < 0 && lv_team >= autoAFDD36F3_ae) ) ; lv_team += autoAFDD36F3_ai ) {
        if ((gv_team_alive[lv_team] == true)) {
            gv_team_rank[lv_current_rank] = lv_team;
            lv_current_rank = (lv_current_rank + 1);
            DialogControlCreateFromTemplate(lv_globalDialog, c_triggerControlTypePanel, "ZoneLeaderboard/TeamFrame");
            lv_teamFrame = DialogControlLastCreated();
            gv_leaderboard_team_frames[lv_team] = DialogControlLastCreated();
            DialogControlHookup(lv_teamFrame, c_triggerControlTypeLabel, "TeamScore");
            gv_leaderboard_team_score_dialog_item[lv_team] = DialogControlLastCreated();
            DialogControlHookup(lv_teamFrame, c_triggerControlTypeLabel, "TeamName");
            gv_leaderboard_team_name_dialog_item[lv_team] = DialogControlLastCreated();
            libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (StringExternal("Param/Value/7A6AC653") + IntToText((lv_team + 1))), PlayerGroupAll());
        }

    }
    lv_player = 1;
    for ( ; ( (autoF075F969_ai >= 0 && lv_player <= autoF075F969_ae) || (autoF075F969_ai < 0 && lv_player >= autoF075F969_ae) ) ; lv_player += autoF075F969_ai ) {
        if ((gv_player_alive[lv_player] == true)) {
            lv_team = gv_player_team[lv_player];
            gv_player_team_rank[lv_team][lv_current_team_rank[lv_team]] = lv_player;
            lv_current_team_rank[lv_team] = (lv_current_team_rank[lv_team] + 1);
            DialogControlCreateInPanelFromTemplate(gv_leaderboard_team_frames[gv_player_team[lv_player]], c_triggerControlTypePanel, "ZoneLeaderboard/PlayerFrame");
            lv_playerFrame = DialogControlLastCreated();
            gv_leaderboard_player_frames[lv_player] = lv_playerFrame;
            DialogControlHookup(lv_playerFrame, c_triggerControlTypeLabel, "Player1Score");
            gv_leaderboard_player_scores[lv_player] = DialogControlLastCreated();
            gv_player_colors[lv_player] = libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false));
            DialogControlHookup(lv_playerFrame, c_triggerControlTypeLabel, "Player1Name");
            gv_leaderboard_player_names[lv_player] = DialogControlLastCreated();
            libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (PlayerName(lv_player) + (StringExternal("Param/Value/298CA7FA") + (IntToText(RoundI(gv_player_elos[lv_player])) + StringExternal("Param/Value/FEC831E8")))), PlayerGroupAll());
            gf_UpdatePlayerColor(lv_player);
        }
    }
    gf_UpdateLeaderboardSortOrder();
}

void gf_UpdateLeaderboardSortOrder () {
    // Variable Declarations
    color lv_team_color;
    int lv_player_rank;
    int lv_team_rank;
    int lv_team;
    int lv_player;

    // Automatic Variable Declarations
    int auto45D61597_ae;
    const int auto45D61597_ai = 1;
    int auto6A520955_ae;
    const int auto6A520955_ai = 1;
    int auto37397ADC_ae;
    const int auto37397ADC_ai = 1;

    // Variable Initialization
    lv_team_color = Color(0,0,0);

    // Implementation
    auto45D61597_ae = (gv_num_teams - 1);
    lv_team_rank = 0;
    for ( ; ( (auto45D61597_ai >= 0 && lv_team_rank <= auto45D61597_ae) || (auto45D61597_ai < 0 && lv_team_rank >= auto45D61597_ae) ) ; lv_team_rank += auto45D61597_ai ) {
        DialogControlSetPosition(gv_leaderboard_team_frames[gv_team_rank[lv_team_rank]], PlayerGroupAll(), c_anchorTopLeft, 0, ((((gv_players_per_team + 1) * 25) + 5) * lv_team_rank));
    }
    auto6A520955_ae = (gv_num_teams - 1);
    lv_team = 0;
    for ( ; ( (auto6A520955_ai >= 0 && lv_team <= auto6A520955_ae) || (auto6A520955_ai < 0 && lv_team >= auto6A520955_ae) ) ; lv_team += auto6A520955_ai ) {
        if ((gv_team_alive[lv_team] == true)) {
            lv_team_color = gv_player_colors[gv_player_team_rank[lv_team][0]];
            libNtve_gf_SetDialogItemColor(gv_leaderboard_team_name_dialog_item[lv_team], lv_team_color, PlayerGroupAll());
            libNtve_gf_SetDialogItemColor(gv_leaderboard_team_score_dialog_item[lv_team], lv_team_color, PlayerGroupAll());
        }

        auto37397ADC_ae = (gv_players_per_team - 1);
        lv_player_rank = 0;
        for ( ; ( (auto37397ADC_ai >= 0 && lv_player_rank <= auto37397ADC_ae) || (auto37397ADC_ai < 0 && lv_player_rank >= auto37397ADC_ae) ) ; lv_player_rank += auto37397ADC_ai ) {
            lv_player = gv_player_team_rank[lv_team][lv_player_rank];
            if ((lv_player > 0)) {
                DialogControlSetPosition(gv_leaderboard_player_frames[lv_player], PlayerGroupAll(), c_anchorTopLeft, 20, ((lv_player_rank + 1) * 25));
            }

        }
    }
}

void gf_UpdateLeaderboard (bool lp_force_update_sort) {
    // Variable Declarations
    int lv_team2;
    int lv_team1;
    int lv_player2;
    int lv_player1;
    bool lv_swap_needed;
    bool lv_player_sort_order_modified;
    int lv_swap;
    int lv_sort_index;
    int lv_team;
    int[5] lv_team_scores;
    int lv_player;
    int lv_player_score;

    // Automatic Variable Declarations
    const int auto95E4361A_ae = 8;
    const int auto95E4361A_ai = 1;
    const int auto81D86527_ae = 3;
    const int auto81D86527_ai = 1;
    int auto34AC0828_ae;
    const int auto34AC0828_ai = 1;
    int auto1F60DB84_ae;
    const int auto1F60DB84_ai = 1;
    int autoF24ADD00_ae;
    const int autoF24ADD00_ai = 1;

    // Variable Initialization

    // Implementation
    lv_player = 1;
    for ( ; ( (auto95E4361A_ai >= 0 && lv_player <= auto95E4361A_ae) || (auto95E4361A_ai < 0 && lv_player >= auto95E4361A_ae) ) ; lv_player += auto95E4361A_ai ) {
        if ((gv_player_alive[lv_player] == true)) {
            lv_player_score = (PlayerScoreValueGetAsInt(lv_player, "UnitsKilledValue") + (PlayerScoreValueGetAsInt(lv_player, "StructuresKilledValue") + gv_player_shards_collected[lv_player]));
            gv_player_scores[lv_player] = lv_player_score;
            lv_team_scores[gv_player_team[lv_player]] = (lv_player_score + lv_team_scores[gv_player_team[lv_player]]);
            libNtve_gf_SetDialogItemText(gv_leaderboard_player_scores[lv_player], IntToText(lv_player_score), PlayerGroupAll());
        }

    }
    lv_team = 0;
    for ( ; ( (auto81D86527_ai >= 0 && lv_team <= auto81D86527_ae) || (auto81D86527_ai < 0 && lv_team >= auto81D86527_ae) ) ; lv_team += auto81D86527_ai ) {
        if ((gv_team_alive[lv_team] == true)) {
            libNtve_gf_SetDialogItemText(gv_leaderboard_team_score_dialog_item[lv_team], IntToText(lv_team_scores[lv_team]), PlayerGroupAll());
        }

    }
    auto34AC0828_ae = (gv_num_teams - 2);
    lv_sort_index = 0;
    for ( ; ( (auto34AC0828_ai >= 0 && lv_sort_index <= auto34AC0828_ae) || (auto34AC0828_ai < 0 && lv_sort_index >= auto34AC0828_ae) ) ; lv_sort_index += auto34AC0828_ai ) {
        lv_team1 = gv_team_rank[lv_sort_index];
        lv_team2 = gv_team_rank[(lv_sort_index + 1)];
        if ((gv_team_alive[lv_team1] == gv_team_alive[lv_team2])) {
            lv_swap_needed = (lv_team_scores[lv_team1] < lv_team_scores[lv_team2]);
        }
        else {
            lv_swap_needed = gv_team_alive[lv_team2];
        }
        if ((lv_swap_needed == true)) {
            gv_team_rank[lv_sort_index] = lv_team2;
            gv_team_rank[(lv_sort_index + 1)] = lv_team1;
            lv_player_sort_order_modified = true;
        }

    }
    auto1F60DB84_ae = (gv_num_teams - 1);
    lv_team = 0;
    for ( ; ( (auto1F60DB84_ai >= 0 && lv_team <= auto1F60DB84_ae) || (auto1F60DB84_ai < 0 && lv_team >= auto1F60DB84_ae) ) ; lv_team += auto1F60DB84_ai ) {
        autoF24ADD00_ae = (gv_players_per_team - 2);
        lv_sort_index = 0;
        for ( ; ( (autoF24ADD00_ai >= 0 && lv_sort_index <= autoF24ADD00_ae) || (autoF24ADD00_ai < 0 && lv_sort_index >= autoF24ADD00_ae) ) ; lv_sort_index += autoF24ADD00_ai ) {
            lv_player1 = gv_player_team_rank[lv_team][lv_sort_index];
            lv_player2 = gv_player_team_rank[lv_team][(lv_sort_index + 1)];
            if ((gv_player_alive[lv_player1] == gv_player_alive[lv_player2])) {
                lv_swap_needed = (gv_player_scores[lv_player1] < gv_player_scores[lv_player2]);
            }
            else {
                lv_swap_needed = gv_player_alive[lv_player2];
            }
            if ((lv_swap_needed == true)) {
                gv_player_team_rank[lv_team][lv_sort_index] = lv_player2;
                gv_player_team_rank[lv_team][(lv_sort_index + 1)] = lv_player1;
                lv_player_sort_order_modified = true;
            }

        }
    }
    if ((!((lv_player_sort_order_modified == true) || (lp_force_update_sort == true)))) {
        gf_UpdateLeaderboardSortOrder();
    }

}

void gf_RedrawDeathNotifications () {
    // Variable Declarations
    int lv_index;
    int lv_player;
    text lv_string;

    // Automatic Variable Declarations
    int auto7DBB0B2B_ae;
    const int auto7DBB0B2B_ai = 1;

    // Variable Initialization

    // Implementation
    while ((gv_num_messages >= 1)) {
        lv_string = gv_messages[0];
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lv_string);
        Wait(8.0, c_timeGame);
        while (gv_message_lock) {
            Wait(1.0, c_timeGame);
        }
        gv_message_lock = true;
        auto7DBB0B2B_ae = gv_num_messages;
        lv_index = 0;
        for ( ; ( (auto7DBB0B2B_ai >= 0 && lv_index <= auto7DBB0B2B_ae) || (auto7DBB0B2B_ai < 0 && lv_index >= auto7DBB0B2B_ae) ) ; lv_index += auto7DBB0B2B_ai ) {
            gv_messages[lv_index] = gv_messages[(lv_index + 1)];
        }
        gv_num_messages = (gv_num_messages - 1);
        gv_message_lock = false;
    }
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
}

void gf_NotifyPlayerDied (int lp_palyer) {
    // Automatic Variable Declarations
    // Implementation
    gf_AddMessage((TextWithColor(PlayerName(lp_palyer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_palyer, false))) + StringExternal("Param/Value/90E4AD59")));
}

void gf_NotifyPlayerLeave (int lp_palyer) {
    // Automatic Variable Declarations
    // Implementation
    gf_AddMessage((TextWithColor(PlayerName(lp_palyer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_palyer, false))) + StringExternal("Param/Value/8D5E846C")));
}

void gf_AddMessage (text lp_message) {
    // Variable Declarations
    bool lv_process_needed;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while (gv_message_lock) {
        Wait(1.0, c_timeGame);
    }
    gv_message_lock = true;
    lv_process_needed = (gv_num_messages == 0);
    gv_messages[gv_num_messages] = lp_message;
    gv_num_messages = (gv_num_messages + 1);
    gv_message_lock = false;
    if ((lv_process_needed == true)) {
        gf_RedrawDeathNotifications();
    }

}

int gf_GetBunkerIndex (unit lp_bunker) {
    // Variable Declarations
    int lv_y;
    int lv_x;
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_point = UnitGetPosition(lp_bunker);
    lv_x = RoundI(((PointGetX(lv_point) - 20.5) / 10.0));
    lv_y = RoundI(((90.0 - PointGetY(lv_point)) / 10.0));
    return (lv_x + RoundI((lv_y * 8.0)));
}

void gf_OnBunkerCreated (int lp_player, unit lp_bunker) {
    // Variable Declarations
    int lv_bunker_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_bunker_index = gf_GetBunkerIndex(lp_bunker);
    gv_bunker_locations[lv_bunker_index] = UnitGetPosition(lp_bunker);
    gv_bunker_owners[lv_bunker_index] = lp_player;
    gv_bunker_retire_status[lv_bunker_index] = false;
    gv_bunkers[lv_bunker_index] = lp_bunker;
    UnitGroupAdd(gv_structuresGroup[lp_player], lp_bunker);
    UnitControlGroupAddUnit(UnitGetOwner(lp_bunker), 2, lp_bunker);
    TriggerAddEventUnitDied(gt_BunkerDestoryed, UnitRefFromUnit(lp_bunker));
}

void gf_OnBunkerCreated3 (unit lp_bunker) {
    // Variable Declarations
    int lv_bunker_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    UnitGroupAdd(gv_structuresGroup[UnitGetOwner(lp_bunker)], lp_bunker);
    UnitControlGroupAddUnit(UnitGetOwner(lp_bunker), 2, lp_bunker);
     TriggerAddEventUnitOrder(gt_OnRallyChange, UnitRefFromUnit(lp_bunker), AbilityCommand("Rally", 0));
}

void gf_OnBunkerCreated2 (unit lp_worker) {
    // Variable Declarations
    int lv_untitledVariable001;
    int lv_bunker_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gf_PlayerHasNuke(UnitGetOwner(lp_worker)) == true)) {
        libNtve_gf_AttachModelToUnit(lp_worker, "SS_PowerupStrongerMissiles", "Ref_Hardpoint");
        libHots_gf_StoreActorForUnit(lp_worker, 1, libNtve_gf_ActorLastCreated());
    }

    UnitControlGroupAddUnit(UnitGetOwner(lp_worker), 3, lp_worker);
    TriggerAddEventUnitDied(gt_ScvDied, UnitRefFromUnit(lp_worker));
}

void gf_OnBunkerRemoved (int lp_player, unit lp_bunker) {
    // Variable Declarations
    int lv_bunker_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_bunker_index = gf_GetBunkerIndex(lp_bunker);
    gv_bunker_owners[lv_bunker_index] = 0;
    gv_bunker_merc_status[lv_bunker_index] = false;
    gf_TestPlayerDead(lp_player);
}

void gf_UpdateAllWorkers (int lp_player) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoDF5EA8CF_g;
    int autoDF5EA8CF_u;

    // Variable Initialization

    // Implementation
    autoDF5EA8CF_g = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDF5EA8CF_u = UnitGroupCount(autoDF5EA8CF_g, c_unitCountAll);
    for (;; autoDF5EA8CF_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoDF5EA8CF_g, autoDF5EA8CF_u);
        if (lv_unit == null) { break; }
        if ((UnitGetType(lv_unit) == "SCV")) {
            libNtve_gf_KillModel(libHots_gf_ActorForUnit(lv_unit, 1));
            if ((gf_PlayerHasNuke(lp_player) == true)) {
                libNtve_gf_AttachModelToUnit(lv_unit, "SS_PowerupStrongerMissiles", "Ref_Hardpoint");
                libHots_gf_StoreActorForUnit(lv_unit, 1, libNtve_gf_ActorLastCreated());
            }

        }

    }
}

bool gf_PlayerHasNuke (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return (UnitMagazineCount(gv_ghost_academies[lp_player], "ArmSiloWithNuke") >= 1);
}

void gf_TestVictory () {
    // Variable Declarations
    int lv_player;
    int lv_alive_team;

    // Automatic Variable Declarations
    const int autoE750AFA0_ae = 8;
    const int autoE750AFA0_ai = 1;
    const int auto09869863_ae = 8;
    const int auto09869863_ai = 1;
    const int auto40A4F1D1_ae = 8;
    const int auto40A4F1D1_ai = 1;

    // Variable Initialization
    lv_alive_team = -1;

    // Implementation
    lv_player = 1;
    for ( ; ( (autoE750AFA0_ai >= 0 && lv_player <= autoE750AFA0_ae) || (autoE750AFA0_ai < 0 && lv_player >= autoE750AFA0_ae) ) ; lv_player += autoE750AFA0_ai ) {
        if ((gv_player_alive[lv_player] == true)) {
            if (((lv_alive_team == gv_player_team[lv_player]) || (lv_alive_team == -1))) {
                lv_alive_team = gv_player_team[lv_player];
            }
            else {
                return ;
            }
        }

    }
    lv_player = 1;
    for ( ; ( (auto09869863_ai >= 0 && lv_player <= auto09869863_ae) || (auto09869863_ai < 0 && lv_player >= auto09869863_ae) ) ; lv_player += auto09869863_ai ) {
        if ((gv_player_team[lv_player] == lv_alive_team)) {
            gf_RecordUpdateGameVictory(lv_player);
        }

    }
    Wait(2.0, c_timeGame);
    lv_player = 1;
    for ( ; ( (auto40A4F1D1_ai >= 0 && lv_player <= auto40A4F1D1_ae) || (auto40A4F1D1_ai < 0 && lv_player >= auto40A4F1D1_ae) ) ; lv_player += auto40A4F1D1_ai ) {
        if ((gv_player_team[lv_player] == lv_alive_team)) {
            GameOver(lv_player, c_gameOverVictory, false, true);
        }
        else {
            GameOver(lv_player, c_gameOverDefeat, false, true);
        }
    }
}

void gf_OnPlayerDead (int lp_player) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoF739310F_g;
    int autoF739310F_u;

    // Variable Initialization

    // Implementation
    gv_player_alive[lp_player] = false;
    gv_player_colors[lp_player] = Color(0.00, 0.00, 0.00);
    gf_UpdatePlayerColor(lp_player);
    gf_UpdateLeaderboard(true);
    autoF739310F_g = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF739310F_u = UnitGroupCount(autoF739310F_g, c_unitCountAll);
    for (;; autoF739310F_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoF739310F_g, autoF739310F_u);
        if (lv_unit == null) { break; }
        UnitRemove(lv_unit);
    }
    gf_TestVictory();
}

void gf_TestPlayerDead (int lp_player) {
    // Variable Declarations
    int lv_teammate;
    int lv_slot;

    // Automatic Variable Declarations
    const int autoA6BAEF31_ae = 63;
    const int autoA6BAEF31_ai = 1;
    playergroup auto4A0D2F01_g;

    // Variable Initialization

    // Implementation
    lv_slot = 1;
    for ( ; ( (autoA6BAEF31_ai >= 0 && lv_slot <= autoA6BAEF31_ae) || (autoA6BAEF31_ai < 0 && lv_slot >= autoA6BAEF31_ae) ) ; lv_slot += autoA6BAEF31_ai ) {
        if ((gv_bunker_owners[lv_slot] == lp_player)) {
            return ;
        }

    }
    auto4A0D2F01_g = PlayerGroupAlliance(c_playerGroupAlly, lp_player);
    lv_teammate = -1;
    while (true) {
        lv_teammate = PlayerGroupNextPlayer(auto4A0D2F01_g, lv_teammate);
        if (lv_teammate < 0) { break; }
        PlayerSetAlliance(lp_player, c_allianceIdVision, lv_teammate, false);
    }
    VisRevealArea(lp_player, RegionEntireMap(), 0.0, false);
    gf_OnPlayerDead(lp_player);
    gf_NotifyPlayerDied(lp_player);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Melee Initialization
//--------------------------------------------------------------------------------------------------
bool gt_MeleeInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup autoD61BCB46_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UISetResourceVisible(PlayerGroupAll(), c_resourceTypeVespene, false);
    TimerStart(gv_game_timer, 50000.0, false, c_timeGame);
    autoD61BCB46_g = PlayerGroupAll();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoD61BCB46_g, lv_player);
        if (lv_player < 0) { break; }
        PlayerModifyPropertyInt(lv_player, c_playerPropMinerals, c_playerPropOperSetTo, 50);
    }
    gf_AssignTeamLocations();
    gf_SpawnPlayers();
    gf_RecordUpdateGameStart();
    gf_LeaderboardInit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MeleeInitialization_Init () {
    gt_MeleeInitialization = TriggerCreate("gt_MeleeInitialization_Func");
    TriggerAddEventMapInit(gt_MeleeInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Records
//--------------------------------------------------------------------------------------------------
bool gt_Records_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_message;
    int lv_player;

    // Automatic Variable Declarations
    playergroup auto59F71AF3_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto59F71AF3_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto59F71AF3_g, lv_player);
        if (lv_player < 0) { break; }
        lv_message = (StringToText("") + TextWithColor(PlayerName(lv_player), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))));
        lv_message = (lv_message + StringExternal("Param/Value/E66400FB"));
        lv_message = (lv_message + IntToText(gv_player_mode_wins[lv_player]));
        lv_message = (lv_message + StringExternal("Param/Value/77531E47"));
        lv_message = (lv_message + IntToText((gv_player_mode_games[lv_player] + gv_player_mode_wins[lv_player])));
        lv_message = (lv_message + StringExternal("Param/Value/3AC4D29A"));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, lv_message);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Records_Init () {
    gt_Records = TriggerCreate("gt_Records_Func");
    TriggerAddEventChatMessage(gt_Records, c_playerAny, "-records", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LeaderboardPeriodicRefresh
//--------------------------------------------------------------------------------------------------
bool gt_LeaderboardPeriodicRefresh_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_UpdateLeaderboard(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LeaderboardPeriodicRefresh_Init () {
    gt_LeaderboardPeriodicRefresh = TriggerCreate("gt_LeaderboardPeriodicRefresh_Func");
    TriggerAddEventTimePeriodic(gt_LeaderboardPeriodicRefresh, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ShardCollected
//--------------------------------------------------------------------------------------------------
bool gt_ShardCollected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_value;
    point lv_shard_position;
    int lv_player;
    fixed lv_min_distance;
    fixed lv_distance;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto06A249F6_g;
    int auto06A249F6_u;

    // Variable Initialization
    lv_min_distance = 1000.0;

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "MineralCrystal") || (UnitGetType(EventUnit()) == "PalletMinerals") || (UnitGetType(EventUnit()) == "NaturalMineralsRed") || (UnitGetType(EventUnit()) == "NaturalMinerals")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_value = UnitTypeGetCost(UnitGetType(EventUnit()), c_unitCostMinerals);
    lv_shard_position = UnitGetPosition(EventUnit());
    auto06A249F6_g = UnitGroupSearch(null, c_playerAny, lv_shard_position, 3.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto06A249F6_u = UnitGroupCount(auto06A249F6_g, c_unitCountAll);
    for (;; auto06A249F6_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto06A249F6_g, auto06A249F6_u);
        if (lv_unit == null) { break; }
        lv_distance = DistanceBetweenPoints(lv_shard_position, UnitGetPosition(lv_unit));
        if ((lv_distance < lv_min_distance)) {
            lv_player = UnitGetOwner(lv_unit);
        }

    }
    gv_player_shards_collected[lv_player] = (gv_player_shards_collected[lv_player] + lv_value);
    PlayerModifyPropertyInt(lv_player, c_playerPropMinerals, c_playerPropOperAdd, lv_value);
    SoundPlayAtPointForPlayer(SoundLink("UI_ResourcePickup", -1), c_maxPlayers, PlayerGroupSingle(lv_player), lv_shard_position, 0.0, 100.0, 0.0);
    TextTagCreate((StringExternal("Param/Value/395798D3") + IntToText(lv_value)), 24, lv_shard_position, 1.0, true, false, PlayerGroupSingle(lv_player));
    TextTagSetVelocity(TextTagLastCreated(), 0.5, 90.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 5.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShardCollected_Init () {
    gt_ShardCollected = TriggerCreate("gt_ShardCollected_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ShardSpawn
//--------------------------------------------------------------------------------------------------
bool gt_ShardSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_spawn_type;
    int lv_p;
    unit lv_shard;
    fixed lv_elapsed_seconds;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_elapsed_seconds = TimerGetElapsed(gv_game_timer);
    if ((lv_elapsed_seconds < 90.0)) {
        return true;
    }

    if ((RandomInt(0, 100) < 50)) {
        lv_p = RandomInt(0, 100);
        if ((lv_p < gv_untitledVariable002)) {
            lv_spawn_type = "MineralCrystal";
        }
        else if ((lv_p < (gv_untitledVariable002 + gv_untitledVariable003))) {
            lv_spawn_type = "PalletMinerals";
        }
        else if ((lv_p < 1000)) {
            lv_spawn_type = "NaturalMineralsRed";
        }
        UnitCreate(1, lv_spawn_type, 0, 0, RegionRandomPoint(RegionFromId(1)), 270.0);
        lv_shard = UnitLastCreated();
        TriggerAddEventUnitDied(gt_ShardCollected, UnitRefFromUnit(lv_shard));
    }

    if ((lv_elapsed_seconds > 180.0)) {
        if ((gv_untitledVariable002 > 0)) {
            gv_untitledVariable002 = (gv_untitledVariable002 - 2);
            gv_untitledVariable003 = (gv_untitledVariable003 + 2);
        }
        else {
            gv_untitledVariable003 = (gv_untitledVariable003 - 2);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShardSpawn_Init () {
    gt_ShardSpawn = TriggerCreate("gt_ShardSpawn_Func");
    TriggerAddEventTimePeriodic(gt_ShardSpawn, 20.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SpawnUnit
//--------------------------------------------------------------------------------------------------
bool gt_SpawnUnit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_scan_index;
    string lv_unit_type;
    int lv_bunker_owner;
    int lv_bunker_index;

    // Automatic Variable Declarations
    const int auto0D528480_ae = 60;
    const int auto0D528480_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_scan_index = 0;
    for ( ; ( (auto0D528480_ai >= 0 && lv_scan_index <= auto0D528480_ae) || (auto0D528480_ai < 0 && lv_scan_index >= auto0D528480_ae) ) ; lv_scan_index += auto0D528480_ai ) {
        lv_bunker_index = gv_spawn_scan_order[lv_scan_index];
        lv_bunker_owner = gv_bunker_owners[lv_bunker_index];
        if ((lv_bunker_owner != 0) && (gv_bunker_retire_status[lv_bunker_index] == false) && (PlayerGetPropertyInt(lv_bunker_owner, c_playerPropSuppliesUsed) < PlayerGetPropertyInt(lv_bunker_owner, c_playerPropSuppliesMade))) {
            lv_unit_type = gv_bunker_base_unit_type[lv_bunker_index];
            if ((gv_bunker_merc_status[lv_bunker_index] == true)) {
                if ((lv_unit_type == "Marine")) {
                    lv_unit_type = "WarPig";
                }
                else if ((lv_unit_type == "Reaper")) {
                    lv_unit_type = "MercReaper";
                }
                else if ((lv_unit_type == "Marauder")) {
                    lv_unit_type = "HammerSecurity";
                }
                else if ((lv_unit_type == "Ghost")) {
                    lv_unit_type = "Spectre";
                }
            }

            UnitCreate(1, lv_unit_type, 0, lv_bunker_owner, PointWithOffset(gv_bunker_locations[lv_bunker_index], gv_player_spawn_offsets[lv_bunker_owner][0], gv_player_spawn_offsets[lv_bunker_owner][1]), 270.0);
            UnitControlGroupAddUnit(lv_bunker_owner, 1, UnitLastCreated());
            if ((gv_bunker_rally_points[lv_bunker_index] != null)) {
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), gv_bunker_rally_points[lv_bunker_index]), c_orderQueueReplace);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnUnit_Init () {
    gt_SpawnUnit = TriggerCreate("gt_SpawnUnit_Func");
    TriggerAddEventTimePeriodic(gt_SpawnUnit, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: OnRallyChange
//--------------------------------------------------------------------------------------------------
bool gt_OnRallyChange_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "Bunker") || (UnitGetType(EventUnit()) == "InfestedBunker")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_bunker_rally_points[gf_GetBunkerIndex(EventUnit())] = UnitRallyPointTargetPoint(EventUnit(), 1, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OnRallyChange_Init () {
    gt_OnRallyChange = TriggerCreate("gt_OnRallyChange_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: OnUpgrade
//--------------------------------------------------------------------------------------------------
bool gt_OnUpgrade_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_bunker;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(31.0, c_timeGame);
    gv_bunker_merc_status[gf_GetBunkerIndex(EventUnit())] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OnUpgrade_Init () {
    gt_OnUpgrade = TriggerCreate("gt_OnUpgrade_Func");
    TriggerAddEventUnitAbility(gt_OnUpgrade, null, AbilityCommand("UpgradeToOrbital", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ConstructionCompleted
//--------------------------------------------------------------------------------------------------
bool gt_BunkerBuild_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnitProgressUnit()) == "Bunker")) {
        gf_OnBunkerCreated(EventPlayer(), EventUnitProgressUnit());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BunkerBuild_Init () {
    gt_BunkerBuild = TriggerCreate("gt_BunkerBuild_Func");
    TriggerAddEventUnitConstructProgress(gt_BunkerBuild, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ConstructionStarted
//--------------------------------------------------------------------------------------------------
bool gt_BunkerBuild2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_structure;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_structure = EventUnitProgressUnit();
    if ((UnitGetType(EventUnitProgressUnit()) == "Bunker")) {
        gf_OnBunkerCreated3(EventUnitProgressUnit());
    }
    else if ((UnitGetType(EventUnitProgressUnit()) == "SiegeBreakerSieged")) {
        UnitControlGroupAddUnit(UnitGetOwner(EventUnit()), 5, EventUnitProgressUnit());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BunkerBuild2_Init () {
    gt_BunkerBuild2 = TriggerCreate("gt_BunkerBuild2_Func");
    TriggerAddEventUnitConstructProgress(gt_BunkerBuild2, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BunkerDied
//--------------------------------------------------------------------------------------------------
bool gt_BunkerDestoryed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "InfestedBunker") || (UnitGetType(EventUnit()) == "Bunker")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_OnBunkerRemoved(EventPlayer(), EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BunkerDestoryed_Init () {
    gt_BunkerDestoryed = TriggerCreate("gt_BunkerDestoryed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: OnScvDied
//--------------------------------------------------------------------------------------------------
bool gt_ScvDied_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_structure_to_spawn_at;
    point lv_spawnPosition;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "SCV"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = UnitGetOwner(EventUnit());
    lv_spawnPosition = UnitGetPosition(EventUnit());
    Wait(5.0, c_timeGame);
    lv_structure_to_spawn_at = UnitGroupClosestToPoint(gv_structuresGroup[lv_player], lv_spawnPosition);
    UnitCreate(1, "SCV", 0, lv_player, PointWithOffset(UnitGetPosition(lv_structure_to_spawn_at), (0.0 - gv_player_spawn_offsets[lv_player][0]), (0.0 - gv_player_spawn_offsets[lv_player][1])), 270.0);
    gf_OnBunkerCreated2(UnitLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScvDied_Init () {
    gt_ScvDied = TriggerCreate("gt_ScvDied_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: OnRetire
//--------------------------------------------------------------------------------------------------
bool gt_OnRetire_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_bunker_retire_status[gf_GetBunkerIndex(EventUnit())] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OnRetire_Init () {
    gt_OnRetire = TriggerCreate("gt_OnRetire_Func");
    TriggerAddEventUnitAbility(gt_OnRetire, null, AbilityCommand("RetireStructure", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: OnUnretire
//--------------------------------------------------------------------------------------------------
bool gt_OnUnretire_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_bunker_retire_status[gf_GetBunkerIndex(EventUnit())] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OnUnretire_Init () {
    gt_OnUnretire = TriggerCreate("gt_OnUnretire_Func");
    TriggerAddEventUnitAbility(gt_OnUnretire, null, AbilityCommand("UnretireStructure", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ScvCalldown
//--------------------------------------------------------------------------------------------------
bool gt_ScvCalldown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoC83EDAA1_g;
    int autoC83EDAA1_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(5.0, c_timeGame);
    autoC83EDAA1_g = UnitGroup("SCV", UnitGetOwner(EventUnit()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC83EDAA1_u = UnitGroupCount(autoC83EDAA1_g, c_unitCountAll);
    for (;; autoC83EDAA1_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoC83EDAA1_g, autoC83EDAA1_u);
        if (lv_unit == null) { break; }
        gf_OnBunkerCreated2(lv_unit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScvCalldown_Init () {
    gt_ScvCalldown = TriggerCreate("gt_ScvCalldown_Func");
    TriggerAddEventUnitAbility(gt_ScvCalldown, null, AbilityCommand("CalldownMULE", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ArmNuke
//--------------------------------------------------------------------------------------------------
bool gt_ArmNuke_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_UpdateAllWorkers(UnitGetOwner(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmNuke_Init () {
    gt_ArmNuke = TriggerCreate("gt_ArmNuke_Func");
    TriggerAddEventUnitAbility(gt_ArmNuke, null, AbilityCommand("ArmSiloWithNuke", 0), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(gt_ArmNuke, null, AbilityCommand("TacNukeStrike", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PlayerLeaveGame
//--------------------------------------------------------------------------------------------------
bool gt_PlayerLeaveGame_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_bunker_slot;
    int lv_teammate;
    int lv_possible_teammate;
    unit lv_unit;

    // Automatic Variable Declarations
    const int auto0C76BC50_ae = 8;
    const int auto0C76BC50_ai = 1;
    unitgroup auto78359B8E_g;
    int auto78359B8E_u;
    const int auto356FEFDF_ae = 63;
    const int auto356FEFDF_ai = 1;
    unitgroup auto3DD62C4A_g;
    int auto3DD62C4A_u;

    // Variable Initialization
    lv_teammate = -1;
    lv_possible_teammate = -1;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayer();
    if ((gv_player_alive[lv_player] == true)) {
    }
    else {
        return true;
    }
    lv_possible_teammate = 0;
    for ( ; ( (auto0C76BC50_ai >= 0 && lv_possible_teammate <= auto0C76BC50_ae) || (auto0C76BC50_ai < 0 && lv_possible_teammate >= auto0C76BC50_ae) ) ; lv_possible_teammate += auto0C76BC50_ai ) {
        if (((gv_player_team[lv_possible_teammate] == gv_player_team[lv_player]) && (gv_player_alive[lv_possible_teammate] == true))) {
            lv_teammate = lv_possible_teammate;
        }

    }
    if ((lv_teammate >= 1)) {
        UnitGroupAddUnitGroup(gv_structuresGroup[lv_teammate], gv_structuresGroup[lv_player]);
        lv_bunker_slot = 1;
        for ( ; ( (auto356FEFDF_ai >= 0 && lv_bunker_slot <= auto356FEFDF_ae) || (auto356FEFDF_ai < 0 && lv_bunker_slot >= auto356FEFDF_ae) ) ; lv_bunker_slot += auto356FEFDF_ai ) {
            if ((gv_bunker_owners[lv_bunker_slot] == lv_player)) {
                gv_bunker_owners[lv_bunker_slot] = lv_teammate;
            }

        }
        auto3DD62C4A_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto3DD62C4A_u = UnitGroupCount(auto3DD62C4A_g, c_unitCountAll);
        for (;; auto3DD62C4A_u -= 1) {
            lv_unit = UnitGroupUnitFromEnd(auto3DD62C4A_g, auto3DD62C4A_u);
            if (lv_unit == null) { break; }
            if (((UnitGetType(lv_unit) == "SCV") || (UnitGetType(lv_unit) == "EngineeringBay") || (UnitGetType(lv_unit) == "GhostAcademy"))) {
                UnitRemove(lv_unit);
            }
            else {
                UnitSetOwner(lv_unit, lv_teammate, true);
            }
        }
    }
    else {
        auto78359B8E_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto78359B8E_u = UnitGroupCount(auto78359B8E_g, c_unitCountAll);
        for (;; auto78359B8E_u -= 1) {
            lv_unit = UnitGroupUnitFromEnd(auto78359B8E_g, auto78359B8E_u);
            if (lv_unit == null) { break; }
            if (((UnitGetType(lv_unit) == "Bunker") || (UnitGetType(lv_unit) == "InfestedBunker"))) {
                UnitCreate(1, "NaturalMineralsRed", 0, 0, UnitGetPosition(lv_unit), 270.0);
            }

            if (((UnitGetType(lv_unit) == "SupplyDepot") || (UnitGetType(lv_unit) == "SupplyDepotLowered"))) {
                UnitCreate(1, "PalletMinerals", 0, 0, UnitGetPosition(lv_unit), 270.0);
            }

            if (((UnitGetType(lv_unit) == "SensorTower") || (UnitGetType(lv_unit) == "HiveMindEmulator"))) {
                UnitCreate(1, "MineralCrystal", 0, 0, UnitGetPosition(lv_unit), 270.0);
            }

        }
        UnitRemove(lv_unit);
    }
    gf_OnPlayerDead(lv_player);
    gf_NotifyPlayerLeave(lv_player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerLeaveGame_Init () {
    gt_PlayerLeaveGame = TriggerCreate("gt_PlayerLeaveGame_Func");
    TriggerAddEventPlayerLeft(gt_PlayerLeaveGame, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MineralTrickle
//--------------------------------------------------------------------------------------------------
bool gt_MineralTrickle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup auto52F9A234_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto52F9A234_g = PlayerGroupAll();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto52F9A234_g, lv_player);
        if (lv_player < 0) { break; }
        PlayerModifyPropertyInt(lv_player, c_playerPropMinerals, c_playerPropOperAdd, 5);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MineralTrickle_Init () {
    gt_MineralTrickle = TriggerCreate("gt_MineralTrickle_Func");
    TriggerAddEventTimePeriodic(gt_MineralTrickle, 3.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_MeleeInitialization_Init();
    gt_Records_Init();
    gt_LeaderboardPeriodicRefresh_Init();
    gt_ShardCollected_Init();
    gt_ShardSpawn_Init();
    gt_SpawnUnit_Init();
    gt_OnRallyChange_Init();
    gt_OnUpgrade_Init();
    gt_BunkerBuild_Init();
    gt_BunkerBuild2_Init();
    gt_BunkerDestoryed_Init();
    gt_ScvDied_Init();
    gt_OnRetire_Init();
    gt_OnUnretire_Init();
    gt_ScvCalldown_Init();
    gt_ArmNuke_Init();
    gt_PlayerLeaveGame_Init();
    gt_MineralTrickle_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
